'.source.d':
  'abstract':
    'prefix': 'ab'
    'body': 'abstract '
  'case':
    'prefix': 'cs'
    'body': 'case $1:\n\t$2\n$0'
  'catch':
    'prefix': 'ca'
    'body': 'catch (${1:Exception} ${2:e}) {\n\t$0\n}'
  'class':
    'prefix': 'cl'
    'body': 'class ${1:MyClass} ${2:extends ${3:Parent} }${4:implements ${5:Interface} }{\n\t$6\n}'
  'else if':
    'prefix': 'elif'
    'body': 'else if ($1) {\n\t$0\n}'
  'else':
    'prefix': 'el'
    'body': 'else {\n\t$0\n}'
  'final':
    'prefix': 'fi'
    'body': 'final '
  'finally':
    'prefix': 'fy'
    'body': 'finally {\n\t$0\n}'
  'for':
    'prefix': 'for'
    'body': 'for ($1; $2; $3) {\n\t$0\n}'
  'if':
    'prefix': 'if'
    'body': 'if ($1) {\n\t$0\n}'
  'import':
    'prefix': 'im'
    'body': 'import '
  'int':
    'prefix': 'in'
    'body': 'int'
  'interface':
    'prefix': 'in'
    'body': 'interface ${1:MyInterface} ${2:extends ${3:Parent} }{\n\t$0\n}'
  'printf':
    'prefix': 'pri'
    'body': 'printf($1)'
  'private':
    'prefix': 'pr'
    'body': 'private '
  'protected':
    'prefix': 'po'
    'body': 'protected '
  'public':
    'prefix': 'pu'
    'body': 'public '
  'return':
    'prefix': 're'
    'body': 'return '
  'static':
    'prefix': 'st'
    'body': 'static '
  'switch':
    'prefix': 'sw'
    'body': 'switch ($1) {\n\t$0\n}'
  'synchronized':
    'prefix': 'sy'
    'body': 'synchronized '
  'throw new':
    'prefix': 'tn'
    'body': 'throw new $0'
  'throw':
    'prefix': 'th'
    'body': 'throw $0'
  'try':
    'prefix': 'tr'
    'body': 'try {\n\t$0\n}'
  'variable':
    'prefix': 'v'
    'body': '${1:string} ${2:var}${3: = ${0:null}};'
  'break':
    'prefix': 'br'
    'body': 'break;\n'
  'constant string':
    'prefix': 'cos'
    'body': 'static public final string ${1:var} = "$2";$0'
  'constant':
    'prefix': 'co'
    'body': 'static public final ${1:string} ${2:var} = $3;$0'
  'default':
    'prefix': 'de'
    'body': 'default:\n\t$0'
  'for (each)':
    'prefix': 'fore'
    'body': 'foreach ($1 ; $2) {\n\t$0\n}'
  'std.algorithm.':
    'prefix': 'std.al'
    'body': 'std.algorithm'
  'std.array.':
    'prefix': 'std.ar'
    'body': 'std.array'
  'std.ascii.':
    'prefix': 'std.as'
    'body': 'std.'
  'method (main)':
    'prefix': 'main'
    'body': 'void main() {\n\t$0\n}'
  'method':
    'prefix': 'm'
    'body': '${1:void} ${2:method}($3) ${4:throws $5 }{\n\t$0\n}\n'
  'write':
    'prefix': 'wr'
    'body': 'write($1);'
  'writeln':
    'prefix': 'wrln'
    'body': 'writeln($1);'
  'super':
    'prefix': 'su'
    'body': 'super($1);'
  'test case':
    'prefix': 'tc'
    'body': 'public class ${1:MyTest} extends ${2:TestCase} {\n\t$0\n}'
  'test':
    'prefix': 't'
    'body': 'public void test${1:Name}() throws Exception {\n\t$0\n}'
  'while':
    'prefix': 'wh'
    'body': 'while ($1) {\n\t$0\n}'
  'do while':
    'prefix': 'dow'
    'body': 'do {\n\t$1\n} while($2);'
